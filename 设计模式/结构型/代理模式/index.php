<?php
/**
 * ------------代理模式---------------
 * 为其它对象提供一种代理以控制对这个对象的访问
 * 装饰器：一般是对对象进行装饰，其中的方法行为会有增加，以修饰对象为主
 * 适配器：一般会改变方法行为，目的是保持接口的统一但得到不同的实现
 * 对装饰器模式来说，装饰者（decorator）和被装饰者（decoratee）都实现同一个 接口。对代理模式来说，代理类（proxy class）和真实处理的类（real
 * class）都实现同一个接口。他们之间的边界确实比较模糊，两者都是对类的方法进行扩展，具体区别如下：
 * 1、装饰器模式强调的是增强自身，在被装饰之后你能够在被增强的类上使用增强后的功能。增强后你还是你，只不过能力更强了而已；代理模式强调要让别人帮你去
 * 一些本身与你业务没有太多关系的职责（记录日志、设置缓存）。代理模式是为了实现对象的控制，因为被代理的对象往往难以直接获得或者是其内部不想暴露出来。
 * 2、装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代方案；代理模式则是给一个对象提供一个代理对象，并由代理对象来控制对原有对象的
 * 用；
 * 3、装饰模式是为装饰的对象增强功能；而代理模式对代理的对象施加控制，但不对对象本身的功能进行增强；
 *
 * 代理模式主体是代理对象，代理对象内部对实际对象操作的封装
 */
namespace DesignPatterns\Structural\Proxy;
require_once "Proxy.php";
$proxy = new Proxy();
$proxy ->Request();